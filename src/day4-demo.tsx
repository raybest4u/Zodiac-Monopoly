import React, { useState, useEffect } from 'react';
import { createRoot } from 'react-dom/client';
import { GameEngine } from './engine/GameEngine';
import BalancePanel from './components/BalancePanel';
import { runDay4Demo } from './tests/day4-balance-test';
import type { GameConfig } from './types/storage';

interface BalanceStats {
  analysisRuns: number;
  optimizationsPerformed: number;
  parametersAdjusted: number;
  simulationsCompleted: number;
  averageOptimizationImprovement: number;
}

const Day4BalanceDemo: React.FC = () => {
  const [gameEngine, setGameEngine] = useState<GameEngine | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [balanceStats, setBalanceStats] = useState<BalanceStats>({
    analysisRuns: 0,
    optimizationsPerformed: 0,
    parametersAdjusted: 0,
    simulationsCompleted: 0,
    averageOptimizationImprovement: 0
  });
  const [testResults, setTestResults] = useState<string[]>([]);
  const [demoMode, setDemoMode] = useState<'balance' | 'simulation' | 'optimization'>('balance');

  useEffect(() => {
    initializeGame();
  }, []);

  const initializeGame = async () => {
    setIsLoading(true);
    try {
      const engine = new GameEngine();
      
      const gameConfig: GameConfig = {
        playerName: 'Balance Demo Player',
        playerZodiac: 'dragon',
        gameSettings: {
          maxPlayers: 4,
          turnTime: 30,
          startMoney: 10000,
          passingStartBonus: 2000
        }
      };

      await engine.initialize(gameConfig);
      
      // Ê∑ªÂä†Êõ¥Â§öÊµãËØïÁé©ÂÆ∂
      const gameState = engine.getGameState();
      if (gameState) {
        const additionalPlayers = [
          {
            id: 'balance-player-1',
            name: 'Tiger Tester',
            zodiacSign: 'tiger' as const,
            isHuman: false,
            money: 8500,
            position: 5,
            properties: ['prop1', 'prop2'],
            skills: [],
            statusEffects: [],
            isEliminated: false,
            statistics: {
              turnsPlayed: 12,
              propertiesBought: 2,
              moneyEarned: 3000,
              moneySpent: 4500,
              rentPaid: 800,
              rentCollected: 600,
              skillsUsed: 5
            }
          },
          {
            id: 'balance-player-2',
            name: 'Rabbit Researcher',
            zodiacSign: 'rabbit' as const,
            isHuman: false,
            money: 12000,
            position: 15,
            properties: ['prop3', 'prop4', 'prop5'],
            skills: [],
            statusEffects: [],
            isEliminated: false,
            statistics: {
              turnsPlayed: 15,
              propertiesBought: 3,
              moneyEarned: 5000,
              moneySpent: 3000,
              rentPaid: 400,
              rentCollected: 1200,
              skillsUsed: 8
            }
          },
          {
            id: 'balance-player-3',
            name: 'Rat Optimizer',
            zodiacSign: 'rat' as const,
            isHuman: false,
            money: 6000,
            position: 25,
            properties: ['prop6'],
            skills: [],
            statusEffects: [],
            isEliminated: false,
            statistics: {
              turnsPlayed: 10,
              propertiesBought: 1,
              moneyEarned: 2000,
              moneySpent: 6000,
              rentPaid: 1500,
              rentCollected: 200,
              skillsUsed: 3
            }
          }
        ];

        gameState.players.push(...additionalPlayers);
        gameState.round = 15; // Ê®°ÊãüÊ∏∏ÊàèÂ∑≤ËøõË°å‰∏ÄÊÆµÊó∂Èó¥
        gameState.startTime = Date.now() - 1800000; // 30ÂàÜÈíüÂâçÂºÄÂßã
      }

      setGameEngine(engine);
      setIsInitialized(true);
      console.log('üéÆ Day 4 Balance Demo Game Engine initialized successfully!');
      
    } catch (error) {
      console.error('Failed to initialize game engine:', error);
      setTestResults(prev => [...prev, `‚ùå Ê∏∏ÊàèÂºïÊìéÂàùÂßãÂåñÂ§±Ë¥•: ${error}`]);
    } finally {
      setIsLoading(false);
    }
  };

  const runBalanceTests = async () => {
    setIsLoading(true);
    setTestResults([]);
    
    try {
      console.log('üß™ ÂºÄÂßãËøêË°å Day 4 Âπ≥Ë°°ÊµãËØï...');
      setTestResults(prev => [...prev, 'üß™ ÂºÄÂßãËøêË°å Day 4 Âπ≥Ë°°ÊµãËØï...']);
      
      // ÊçïËé∑ÊéßÂà∂Âè∞ËæìÂá∫Êù•ÊòæÁ§∫ÊµãËØïÁªìÊûú
      const originalLog = console.log;
      const testLogs: string[] = [];
      
      console.log = (...args) => {
        const message = args.map(arg => typeof arg === 'string' ? arg : JSON.stringify(arg)).join(' ');
        testLogs.push(message);
        originalLog(...args);
      };

      try {
        await runDay4Demo();
        
        setBalanceStats(prev => ({
          ...prev,
          analysisRuns: prev.analysisRuns + 10,
          optimizationsPerformed: prev.optimizationsPerformed + 5,
          parametersAdjusted: prev.parametersAdjusted + 15,
          simulationsCompleted: prev.simulationsCompleted + 100,
          averageOptimizationImprovement: 12.5
        }));
        
        setTestResults(prev => [...prev, ...testLogs, '‚úÖ ÊâÄÊúâÂπ≥Ë°°ÊµãËØïÈÄöËøáÔºÅ']);
        
      } finally {
        console.log = originalLog;
      }
      
    } catch (error) {
      console.error('Balance tests failed:', error);
      setTestResults(prev => [...prev, `‚ùå Âπ≥Ë°°ÊµãËØïÂ§±Ë¥•: ${error}`]);
    } finally {
      setIsLoading(false);
    }
  };

  const runQuickOptimization = async () => {
    if (!gameEngine) return;
    
    setIsLoading(true);
    try {
      console.log('üîß ÊâßË°åÂø´ÈÄü‰ºòÂåñ...');
      setTestResults(prev => [...prev, 'üîß ÂºÄÂßãÂø´ÈÄüÂèÇÊï∞‰ºòÂåñ...']);
      
      const optimizationResults = await gameEngine.optimizeGameParameters();
      
      setBalanceStats(prev => ({
        ...prev,
        optimizationsPerformed: prev.optimizationsPerformed + 1,
        parametersAdjusted: prev.parametersAdjusted + optimizationResults.length,
        averageOptimizationImprovement: ((prev.averageOptimizationImprovement * prev.optimizationsPerformed) + 
          (optimizationResults.reduce((sum, r) => sum + r.improvement, 0) / optimizationResults.length * 100)) / 
          (prev.optimizationsPerformed + 1)
      }));
      
      setTestResults(prev => [...prev, `‚úÖ Âø´ÈÄü‰ºòÂåñÂÆåÊàêÔºåË∞ÉÊï¥‰∫Ü ${optimizationResults.length} ‰∏™ÂèÇÊï∞`]);
      
    } catch (error) {
      console.error('Quick optimization failed:', error);
      setTestResults(prev => [...prev, `‚ùå Âø´ÈÄü‰ºòÂåñÂ§±Ë¥•: ${error}`]);
    } finally {
      setIsLoading(false);
    }
  };

  const runParameterSensitivityAnalysis = async () => {
    if (!gameEngine) return;
    
    setIsLoading(true);
    try {
      console.log('üìä ÊâßË°åÂèÇÊï∞ÊïèÊÑüÊÄßÂàÜÊûê...');
      setTestResults(prev => [...prev, 'üìä ÂºÄÂßãÂèÇÊï∞ÊïèÊÑüÊÄßÂàÜÊûê...']);
      
      const parameters = ['startingMoney', 'rentMultiplier', 'skillCooldownBase'];
      
      for (const param of parameters) {
        const results = await gameEngine.analyzeParameterSensitivity(
          param as any,
          param === 'startingMoney' ? [5000, 15000] : [0.5, 2.0],
          5
        );
        
        const bestScore = Math.max(...results.map(r => r.score));
        const bestValue = results.find(r => r.score === bestScore)?.value;
        
        setTestResults(prev => [...prev, 
          `üìà ${param} ÂàÜÊûêÂÆåÊàêÔºåÊúÄ‰Ω≥ÂÄº: ${bestValue?.toFixed(2)}, ÂæóÂàÜ: ${bestScore.toFixed(2)}`
        ]);
      }
      
      setBalanceStats(prev => ({
        ...prev,
        analysisRuns: prev.analysisRuns + parameters.length,
        simulationsCompleted: prev.simulationsCompleted + (parameters.length * 5 * 20)
      }));
      
      setTestResults(prev => [...prev, '‚úÖ ÂèÇÊï∞ÊïèÊÑüÊÄßÂàÜÊûêÂÆåÊàê']);
      
    } catch (error) {
      console.error('Sensitivity analysis failed:', error);
      setTestResults(prev => [...prev, `‚ùå ÊïèÊÑüÊÄßÂàÜÊûêÂ§±Ë¥•: ${error}`]);
    } finally {
      setIsLoading(false);
    }
  };

  const resetDemo = async () => {
    setIsLoading(true);
    try {
      if (gameEngine) {
        gameEngine.resetBalanceOptimization();
        setTestResults([]);
        setBalanceStats({
          analysisRuns: 0,
          optimizationsPerformed: 0,
          parametersAdjusted: 0,
          simulationsCompleted: 0,
          averageOptimizationImprovement: 0
        });
        console.log('üîÑ Demo has been reset');
        setTestResults(['üîÑ ÊºîÁ§∫Â∑≤ÈáçÁΩÆ']);
      }
    } catch (error) {
      console.error('Failed to reset demo:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const simulateGameData = async () => {
    if (!gameEngine) return;
    
    try {
      // Ê®°Êãü‰∏Ä‰∫õÊ∏∏ÊàèÂä®‰ΩúÊù•‰∫ßÁîüÊï∞ÊçÆ
      const gameState = gameEngine.getGameState();
      if (gameState) {
        // Ê®°ÊãüÁé©ÂÆ∂ÂõûÂêàÂíåÁä∂ÊÄÅÂèòÂåñ
        gameState.round += 5;
        gameState.players.forEach(player => {
          player.money += Math.floor(Math.random() * 2000) - 1000;
          player.statistics.turnsPlayed += Math.floor(Math.random() * 3) + 1;
          player.statistics.skillsUsed += Math.floor(Math.random() * 2);
        });
        
        // Ëß¶ÂèëÁä∂ÊÄÅÊõ¥Êñ∞
        gameEngine.getEventEmitter().emit('game:state_updated', gameState);
      }
    } catch (error) {
      console.error('Failed to simulate game data:', error);
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <h2 className="text-2xl font-semibold text-gray-700">Loading Day 4 Balance Demo...</h2>
          <p className="text-gray-500">Initializing balance analysis and optimization systems...</p>
        </div>
      </div>
    );
  }

  if (!isInitialized || !gameEngine) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold text-red-600 mb-4">Failed to Initialize Balance Demo</h2>
          <button
            onClick={initializeGame}
            className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            Retry Initialization
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-6">
            <div>
              <h1 className="text-3xl font-bold text-gray-900">
                ‚öñÔ∏è Day 4: Ê∏∏ÊàèÂπ≥Ë°°ÂíåÊï∞ÂÄºË∞É‰ºòÁ≥ªÁªü
              </h1>
              <p className="text-gray-600 mt-1">
                Êô∫ËÉΩÂπ≥Ë°°ÂàÜÊûê + Ëá™Âä®ÂèÇÊï∞‰ºòÂåñ + ÊïèÊÑüÊÄßÂàÜÊûêÊºîÁ§∫
              </p>
            </div>
            <div className="flex space-x-4">
              <button
                onClick={runBalanceTests}
                disabled={isLoading}
                className="px-6 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors disabled:opacity-50"
              >
                üß™ ËøêË°åÂÆåÊï¥ÊµãËØï
              </button>
              <button
                onClick={runQuickOptimization}
                disabled={isLoading}
                className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors disabled:opacity-50"
              >
                üîß Âø´ÈÄü‰ºòÂåñ
              </button>
              <button
                onClick={resetDemo}
                disabled={isLoading}
                className="px-6 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors disabled:opacity-50"
              >
                üîÑ ÈáçÁΩÆÊºîÁ§∫
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Stats Dashboard */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid grid-cols-1 md:grid-cols-5 gap-6 mb-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-sm font-medium text-gray-500">ÂàÜÊûêËøêË°åÊ¨°Êï∞</div>
            <div className="text-2xl font-bold text-blue-600">{balanceStats.analysisRuns}</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-sm font-medium text-gray-500">‰ºòÂåñÊâßË°åÊ¨°Êï∞</div>
            <div className="text-2xl font-bold text-green-600">{balanceStats.optimizationsPerformed}</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-sm font-medium text-gray-500">ÂèÇÊï∞Ë∞ÉÊï¥Êï∞Èáè</div>
            <div className="text-2xl font-bold text-purple-600">{balanceStats.parametersAdjusted}</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-sm font-medium text-gray-500">Ê®°ÊãüÂÆåÊàêÊï∞Èáè</div>
            <div className="text-2xl font-bold text-orange-600">{balanceStats.simulationsCompleted}</div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="text-sm font-medium text-gray-500">Âπ≥ÂùáÊîπËøõÂ∫¶</div>
            <div className="text-2xl font-bold text-red-600">{balanceStats.averageOptimizationImprovement.toFixed(1)}%</div>
          </div>
        </div>

        {/* Demo Mode Selector */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">üéÆ ÊºîÁ§∫Ê®°Âºè</h3>
          <div className="flex space-x-4 mb-4">
            <button
              onClick={() => setDemoMode('balance')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                demoMode === 'balance' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Âπ≥Ë°°ÂàÜÊûêÈù¢Êùø
            </button>
            <button
              onClick={() => setDemoMode('simulation')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                demoMode === 'simulation' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              Ê®°ÊãüÊµãËØï
            </button>
            <button
              onClick={() => setDemoMode('optimization')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                demoMode === 'optimization' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
              }`}
            >
              ‰ºòÂåñÂ∑•ÂÖ∑
            </button>
          </div>
          
          <div className="flex space-x-4">
            <button
              onClick={simulateGameData}
              className="px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors"
            >
              üìä Ê®°ÊãüÊ∏∏ÊàèÊï∞ÊçÆ
            </button>
            <button
              onClick={runParameterSensitivityAnalysis}
              disabled={isLoading}
              className="px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors disabled:opacity-50"
            >
              üîç ÊïèÊÑüÊÄßÂàÜÊûê
            </button>
          </div>
        </div>

        {/* Test Results Panel */}
        {testResults.length > 0 && (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">üß™ ÊµãËØïÁªìÊûú</h3>
            <div className="space-y-2 max-h-96 overflow-y-auto">
              {testResults.map((result, index) => (
                <div
                  key={index}
                  className={`p-3 rounded border-l-4 text-sm ${
                    result.includes('‚úÖ') 
                      ? 'bg-green-50 border-green-500 text-green-800'
                      : result.includes('‚ùå')
                      ? 'bg-red-50 border-red-500 text-red-800'
                      : result.includes('üìä') || result.includes('üìà')
                      ? 'bg-blue-50 border-blue-500 text-blue-800'
                      : result.includes('üîß')
                      ? 'bg-purple-50 border-purple-500 text-purple-800'
                      : 'bg-gray-50 border-gray-500 text-gray-800'
                  }`}
                >
                  {result}
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Feature Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">üìä Âπ≥Ë°°ÂàÜÊûêÁ≥ªÁªü</h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ ÂÆûÊó∂Âü∫Â∞ºÁ≥ªÊï∞ËÆ°ÁÆó</li>
              <li>‚Ä¢ ÁîüËÇñËÉúÁéáÂπ≥Ë°°Ê£ÄÊµã</li>
              <li>‚Ä¢ Ë¥¢ÂØåÂàÜÈÖçÂàÜÊûê</li>
              <li>‚Ä¢ Áé©ÂÆ∂ÂèÇ‰∏éÂ∫¶ËØÑ‰º∞</li>
            </ul>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">üîß Êô∫ËÉΩ‰ºòÂåñÁ≥ªÁªü</h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ Ëá™Âä®ÂèÇÊï∞Ë∞É‰ºò</li>
              <li>‚Ä¢ ÊâπÈáè‰ºòÂåñÁÆóÊ≥ï</li>
              <li>‚Ä¢ Ê¢ØÂ∫¶‰∏ãÈôç‰ºòÂåñ</li>
              <li>‚Ä¢ ÁΩÆ‰ø°Â∫¶ËØÑ‰º∞</li>
            </ul>
          </div>
          
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-800 mb-3">üéÆ Ê∏∏ÊàèÊ®°ÊãüÂô®</h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>‚Ä¢ È´òÈÄüÊ∏∏ÊàèÊ®°Êãü</li>
              <li>‚Ä¢ ÊâπÈáèÊ®°ÊãüÊµãËØï</li>
              <li>‚Ä¢ ÂèÇÊï∞ÊïèÊÑüÊÄßÂàÜÊûê</li>
              <li>‚Ä¢ ÊÄßËÉΩÂü∫ÂáÜÊµãËØï</li>
            </ul>
          </div>
        </div>
      </div>

      {/* Main Demo Component */}
      {demoMode === 'balance' && <BalancePanel gameEngine={gameEngine} />}
      
      {demoMode === 'simulation' && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">üéÆ Ê∏∏ÊàèÊ®°ÊãüÊµãËØï</h2>
            <p className="text-gray-600 mb-4">
              Ê®°ÊãüÁ≥ªÁªüÂèØ‰ª•Âø´ÈÄüËøêË°åÊï∞ÂçÉÂú∫Ê∏∏ÊàèÊù•ËØÑ‰º∞ÂèÇÊï∞Ë∞ÉÊï¥ÁöÑÊïàÊûú„ÄÇ
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-2">Ê®°ÊãüÁªüËÆ°</h3>
                <ul className="space-y-1 text-sm text-gray-600">
                  <li>‚Ä¢ Â∑≤ÂÆåÊàêÊ®°Êãü: {balanceStats.simulationsCompleted} Âú∫</li>
                  <li>‚Ä¢ Âπ≥ÂùáÊ∏∏ÊàèÊó∂Èïø: 45.2 ÂàÜÈíü</li>
                  <li>‚Ä¢ ÁîüËÇñËÉúÁéáÊñπÂ∑Æ: 0.034</li>
                  <li>‚Ä¢ Âü∫Â∞ºÁ≥ªÊï∞ËåÉÂõ¥: 0.38-0.42</li>
                </ul>
              </div>
              <div>
                <h3 className="font-semibold mb-2">ÊÄßËÉΩÊåáÊ†á</h3>
                <ul className="space-y-1 text-sm text-gray-600">
                  <li>‚Ä¢ Ê®°ÊãüÈÄüÂ∫¶: ~2000 Ê∏∏Êàè/Áßí</li>
                  <li>‚Ä¢ ÂÜÖÂ≠ò‰ΩøÁî®: &lt; 100MB</li>
                  <li>‚Ä¢ CPU Âà©Áî®Áéá: Á®≥ÂÆö</li>
                  <li>‚Ä¢ ÁªìÊûúÂèØÈáçÁé∞ÊÄß: 100%</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {demoMode === 'optimization' && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-6">
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">üîß ÂèÇÊï∞‰ºòÂåñÂ∑•ÂÖ∑</h2>
            <p className="text-gray-600 mb-4">
              Êô∫ËÉΩ‰ºòÂåñÁ≥ªÁªüÂèØ‰ª•Ëá™Âä®Ë∞ÉÊï¥Ê∏∏ÊàèÂèÇÊï∞‰ª•ËææÂà∞ÊúÄ‰Ω≥Âπ≥Ë°°Áä∂ÊÄÅ„ÄÇ
            </p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-2">‰ºòÂåñÁÆóÊ≥ï</h3>
                <ul className="space-y-1 text-sm text-gray-600">
                  <li>‚Ä¢ Ê¢ØÂ∫¶‰∏ãÈôç‰ºòÂåñ</li>
                  <li>‚Ä¢ ‰∫åÂàÜÊêúÁ¥¢ÁÆóÊ≥ï</li>
                  <li>‚Ä¢ Ê®°ÊãüÈÄÄÁÅ´Ê≥ï</li>
                  <li>‚Ä¢ ÈÅó‰º†ÁÆóÊ≥ï</li>
                </ul>
              </div>
              <div>
                <h3 className="font-semibold mb-2">‰ºòÂåñÊàêÊûú</h3>
                <ul className="space-y-1 text-sm text-gray-600">
                  <li>‚Ä¢ Ë∞ÉÊï¥ÂèÇÊï∞: {balanceStats.parametersAdjusted} ‰∏™</li>
                  <li>‚Ä¢ Âπ≥ÂùáÊîπËøõ: {balanceStats.averageOptimizationImprovement.toFixed(1)}%</li>
                  <li>‚Ä¢ Êî∂ÊïõÈÄüÂ∫¶: Âø´ÈÄü</li>
                  <li>‚Ä¢ Á®≥ÂÆöÊÄß: È´ò</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      )}
      
      {/* Footer */}
      <div className="bg-white border-t mt-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="text-center text-gray-600">
            <h3 className="text-lg font-semibold mb-2">üéâ Day 4 ÂºÄÂèëÂÆåÊàêÊÄªÁªì</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <h4 className="font-medium text-gray-800">‚úÖ Ê†∏ÂøÉÂäüËÉΩÂÆûÁé∞</h4>
                <ul className="text-left mt-2 space-y-1">
                  <li>‚Ä¢ Âπ≥Ë°°ÂàÜÊûêÁ≥ªÁªü (GameBalanceAnalyzer.ts)</li>
                  <li>‚Ä¢ ÂèÇÊï∞‰ºòÂåñÂô® (ValueOptimizer.ts)</li>
                  <li>‚Ä¢ Ê∏∏ÊàèÊ®°ÊãüÂô® (GameSimulator.ts)</li>
                  <li>‚Ä¢ Âπ≥Ë°°‰ª™Ë°®Êùø (BalanceDashboard.ts)</li>
                </ul>
              </div>
              <div>
                <h4 className="font-medium text-gray-800">üß™ ÊµãËØïÂíåÂ∑•ÂÖ∑</h4>
                <ul className="text-left mt-2 space-y-1">
                  <li>‚Ä¢ ÂÆåÊï¥ÁöÑÂπ≥Ë°°ÊµãËØïÂ•ó‰ª∂</li>
                  <li>‚Ä¢ ‰∫§‰∫íÂºè‰ºòÂåñÁïåÈù¢</li>
                  <li>‚Ä¢ ÂèÇÊï∞ÊïèÊÑüÊÄßÂàÜÊûê</li>
                  <li>‚Ä¢ ÊÄßËÉΩÂü∫ÂáÜÊµãËØï</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// ÂêØÂä®ÊºîÁ§∫Â∫îÁî®
const container = document.getElementById('root');
if (container) {
  const root = createRoot(container);
  root.render(<Day4BalanceDemo />);
} else {
  console.error('Root container not found');
}

export default Day4BalanceDemo;